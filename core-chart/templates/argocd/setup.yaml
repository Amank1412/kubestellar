{{- if .Values.argocd.install }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ .Release.Name }}-argocd-kubestellar-setup"
data:
  # Simplified script - most waiting logic moved to initContainers
  argocd-setup.sh: |
    #!/usr/bin/env bash
    set -e

    NS={{ .Release.Namespace }}
    ARGOCD_POD=$(kubectl -n $NS get pods -l app.kubernetes.io/name=argocd-server -o 'jsonpath={.items[0].metadata.name}')
    ARGOCD_PASSWD=$(kubectl -n $NS get secret argocd-initial-admin-secret -o jsonpath="{.data.password}")

    echo "[$(date +"%Y-%m-%d %H:%M:%S")] Logging into Argo CD..."
    kubectl -n $NS exec $ARGOCD_POD -- argocd login "{{ .Release.Name }}-argocd-server.$NS" --username admin --password $(echo $ARGOCD_PASSWD | base64 -d) --insecure

    echo "[$(date +"%Y-%m-%d %H:%M:%S")] Adding WDS clusters..."
    {{- range $cp := .Values.WDSes }}
    cp_name={{ $cp.name }}
    
    # Get kubeconfig for the control plane
    key=$(kubectl get controlplane $cp_name -o=jsonpath='{.status.secretRef.inClusterKey}')
    secret_name=$(kubectl get controlplane $cp_name -o=jsonpath='{.status.secretRef.name}')
    secret_namespace=$(kubectl get controlplane $cp_name -o=jsonpath='{.status.secretRef.namespace}')
    kubeconfig="/tmp/${cp_name}.kubeconfig"
    
    kubectl get secret $secret_name -n $secret_namespace -o=jsonpath="{.data.$key}" | base64 -d > "$kubeconfig"
    kubectl -n $NS cp "$kubeconfig" ${ARGOCD_POD}:/tmp
    rm "$kubeconfig"
    
    echo "[$(date +"%Y-%m-%d %H:%M:%S")] Registering Control Plane \"$cp_name\"..."
    kubectl -n $NS exec $ARGOCD_POD -- argocd cluster add ${cp_name} -y --kubeconfig "$kubeconfig"
    kubectl -n $NS exec $ARGOCD_POD -- rm "$kubeconfig"
    {{- end }}

    echo "[$(date +"%Y-%m-%d %H:%M:%S")] Creating applications..."
    {{- range $app := .Values.argocd.applications }}
    echo "[$(date +"%Y-%m-%d %H:%M:%S")] Creating application \"{{ $app.name }}\""
    kubectl -n $NS exec $ARGOCD_POD -- argocd app create "{{ $app.name }}" \
      --project "{{ $app.project | default "default" }}" \
      --repo "{{ $app.repoURL }}" \
      --revision "{{ $app.targetRevision | default "HEAD" }}" \
      --path "{{ $app.path | default "/" }}" \
      --dest-name "{{ $app.destinationWDS }}" \
      --dest-namespace "{{ $app.destinationNamespace | default "default" }}" \
      --sync-option CreateNamespace=true \
      --sync-policy "{{ $app.syncPolicy | default "manual" }}" || true
    {{- end }}

    echo "[$(date +"%Y-%m-%d %H:%M:%S")] Done."
---
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Release.Name }}-argocd-kubestellar-setup"
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
  annotations:
    "helm.sh/hook": post-install, post-upgrade
    "helm.sh/hook-weight": "5"
    "helm.sh/hook-delete-policy": before-hook-creation, hook-succeeded
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
        app.kubernetes.io/instance: {{ .Release.Name | quote }}
        helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    spec:
      restartPolicy: Never
      securityContext:
        runAsNonRoot: true
      serviceAccountName: "{{ .Release.Name }}-argocd-kubestellar-setup"
      
      # INIT CONTAINERS - Handle all the waiting logic
      initContainers:
      
      # INIT CONTAINER 1: Wait for ArgoCD Pod Creation
      - name: wait-argocd-pod-create
        image: quay.io/kubestellar/kubectl:{{ .Values.KUBECTL_VERSION | default "1.30.12" }}
        command: 
        - kubectl
        - wait
        - --for=create
        - pod
        - -l
        - app.kubernetes.io/name=argocd-server
        - -n
        - {{ .Release.Namespace }}
        - --timeout=300s
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
      
      # INIT CONTAINER 2: Wait for ArgoCD Pod Ready
      - name: wait-argocd-pod-ready
        image: quay.io/kubestellar/kubectl:{{ .Values.KUBECTL_VERSION | default "1.30.12" }}
        command:
        - kubectl
        - wait
        - --for=condition=Ready
        - pod
        - -l
        - app.kubernetes.io/name=argocd-server
        - -n
        - {{ .Release.Namespace }}
        - --timeout=300s
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
      
      # INIT CONTAINER 3: Wait for ArgoCD Secret Creation
      - name: wait-argocd-secret-create
        image: quay.io/kubestellar/kubectl:{{ .Values.KUBECTL_VERSION | default "1.30.12" }}
        command:
        - kubectl
        - wait
        - --for=create
        - secret/argocd-initial-admin-secret
        - -n
        - {{ .Release.Namespace }}
        - --timeout=300s
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
      
      # INIT CONTAINER 4-N: Wait for Each Control Plane (Dynamic Loop)
      {{- range $cp := .Values.WDSes }}
      - name: wait-cp-{{ $cp.name }}-create
        image: quay.io/kubestellar/kubectl:{{ $.Values.KUBECTL_VERSION | default "1.30.12" }}
        command:
        - kubectl
        - wait
        - --for=create
        - controlplane/{{ $cp.name }}
        - --timeout=600s
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
      
      - name: wait-cp-{{ $cp.name }}-ready
        image: quay.io/kubestellar/kubectl:{{ $.Values.KUBECTL_VERSION | default "1.30.12" }}
        command:
        - kubectl
        - wait
        - --for=condition=Ready
        - controlplane/{{ $cp.name }}
        - --timeout=600s
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
      {{- end }}

      # MAIN CONTAINER - Simplified logic after initContainers guarantee readiness
      containers:
      - name: add-wds-clusters
        image: quay.io/kubestellar/kubectl:{{ .Values.KUBECTL_VERSION | default "1.30.12" }}
        command: [ "/bin/bash", "/mnt/script/argocd-setup.sh" ]
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
        volumeMounts:
        - name: script
          mountPath: /mnt/script
          readOnly: true
      
      volumes:
      - name: script
        configMap:
          name: "{{ .Release.Name }}-argocd-kubestellar-setup"
          defaultMode: 0744
{{- end }}